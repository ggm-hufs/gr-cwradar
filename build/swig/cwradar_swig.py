# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cwradar_swig', [dirname(__file__)])
        except ImportError:
            import _cwradar_swig
            return _cwradar_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_cwradar_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cwradar_swig = swig_import_helper()
    del swig_import_helper
else:
    import _cwradar_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _cwradar_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _cwradar_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _cwradar_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _cwradar_swig.high_res_timer_epoch()
class doppler_velocity_multiple_targets_ff(object):
    """Proxy of C++ gr::cwradar::doppler_velocity_multiple_targets_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, double samples_per_sec, double radar_freq, double signal_min_dB, double angle_of_approach, 
            double lowpass_cut_freq, double highpass_cut_freq, int max_num_of_targets, 
            double doppler_signal_bw) -> doppler_velocity_multiple_targets_ff_sptr
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def set_samples_per_sec(self, *args, **kwargs):
        """set_samples_per_sec(doppler_velocity_multiple_targets_ff self, double _samples_per_sec_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_samples_per_sec(self, *args, **kwargs)

    def set_radar_freq(self, *args, **kwargs):
        """set_radar_freq(doppler_velocity_multiple_targets_ff self, double _radar_freq_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_radar_freq(self, *args, **kwargs)

    def set_signal_min_dB(self, *args, **kwargs):
        """set_signal_min_dB(doppler_velocity_multiple_targets_ff self, double _signal_min_dB_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_signal_min_dB(self, *args, **kwargs)

    def set_angle_of_approach(self, *args, **kwargs):
        """set_angle_of_approach(doppler_velocity_multiple_targets_ff self, double _angle_of_approach_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_angle_of_approach(self, *args, **kwargs)

    def set_lowpass_cut_freq(self, *args, **kwargs):
        """set_lowpass_cut_freq(doppler_velocity_multiple_targets_ff self, double _lowpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_lowpass_cut_freq(self, *args, **kwargs)

    def set_highpass_cut_freq(self, *args, **kwargs):
        """set_highpass_cut_freq(doppler_velocity_multiple_targets_ff self, double _highpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_highpass_cut_freq(self, *args, **kwargs)

    def set_max_num_of_targets(self, *args, **kwargs):
        """set_max_num_of_targets(doppler_velocity_multiple_targets_ff self, int _max_num_of_targets_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_max_num_of_targets(self, *args, **kwargs)

    def set_doppler_signal_bw(self, *args, **kwargs):
        """set_doppler_signal_bw(doppler_velocity_multiple_targets_ff self, double _doppler_signal_bw_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_set_doppler_signal_bw(self, *args, **kwargs)

    def samples_per_sec(self):
        """samples_per_sec(doppler_velocity_multiple_targets_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_samples_per_sec(self)

    def radar_freq(self):
        """radar_freq(doppler_velocity_multiple_targets_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_radar_freq(self)

    def signal_min_dB(self):
        """signal_min_dB(doppler_velocity_multiple_targets_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_signal_min_dB(self)

    def angle_of_approach(self):
        """angle_of_approach(doppler_velocity_multiple_targets_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_angle_of_approach(self)

    def lowpass_cut_freq(self):
        """lowpass_cut_freq(doppler_velocity_multiple_targets_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_lowpass_cut_freq(self)

    def highpass_cut_freq(self):
        """highpass_cut_freq(doppler_velocity_multiple_targets_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_highpass_cut_freq(self)

    def max_num_of_targets(self):
        """max_num_of_targets(doppler_velocity_multiple_targets_ff self) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_max_num_of_targets(self)

    def doppler_signal_bw(self):
        """doppler_signal_bw(doppler_velocity_multiple_targets_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_doppler_signal_bw(self)

    __swig_destroy__ = _cwradar_swig.delete_doppler_velocity_multiple_targets_ff
    __del__ = lambda self : None;
doppler_velocity_multiple_targets_ff_swigregister = _cwradar_swig.doppler_velocity_multiple_targets_ff_swigregister
doppler_velocity_multiple_targets_ff_swigregister(doppler_velocity_multiple_targets_ff)

def doppler_velocity_multiple_targets_ff_make(*args, **kwargs):
  """
    doppler_velocity_multiple_targets_ff_make(size_t vlen, double samples_per_sec, double radar_freq, double signal_min_dB, double angle_of_approach, 
        double lowpass_cut_freq, double highpass_cut_freq, int max_num_of_targets, 
        double doppler_signal_bw) -> doppler_velocity_multiple_targets_ff_sptr
    """
  return _cwradar_swig.doppler_velocity_multiple_targets_ff_make(*args, **kwargs)

class doppler_velocity_multiple_targets_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cwradar::doppler_velocity_multiple_targets_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cwradar::doppler_velocity_multiple_targets_ff)> self) -> doppler_velocity_multiple_targets_ff_sptr
        __init__(boost::shared_ptr<(gr::cwradar::doppler_velocity_multiple_targets_ff)> self, doppler_velocity_multiple_targets_ff p) -> doppler_velocity_multiple_targets_ff_sptr
        """
        this = _cwradar_swig.new_doppler_velocity_multiple_targets_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(doppler_velocity_multiple_targets_ff_sptr self) -> doppler_velocity_multiple_targets_ff"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr___deref__(self)

    __swig_destroy__ = _cwradar_swig.delete_doppler_velocity_multiple_targets_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(doppler_velocity_multiple_targets_ff_sptr self, size_t vlen, double samples_per_sec, double radar_freq, double signal_min_dB, double angle_of_approach, 
            double lowpass_cut_freq, double highpass_cut_freq, int max_num_of_targets, 
            double doppler_signal_bw) -> doppler_velocity_multiple_targets_ff_sptr
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_make(self, *args, **kwargs)

    def set_samples_per_sec(self, *args, **kwargs):
        """set_samples_per_sec(doppler_velocity_multiple_targets_ff_sptr self, double _samples_per_sec_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_samples_per_sec(self, *args, **kwargs)

    def set_radar_freq(self, *args, **kwargs):
        """set_radar_freq(doppler_velocity_multiple_targets_ff_sptr self, double _radar_freq_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_radar_freq(self, *args, **kwargs)

    def set_signal_min_dB(self, *args, **kwargs):
        """set_signal_min_dB(doppler_velocity_multiple_targets_ff_sptr self, double _signal_min_dB_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_signal_min_dB(self, *args, **kwargs)

    def set_angle_of_approach(self, *args, **kwargs):
        """set_angle_of_approach(doppler_velocity_multiple_targets_ff_sptr self, double _angle_of_approach_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_angle_of_approach(self, *args, **kwargs)

    def set_lowpass_cut_freq(self, *args, **kwargs):
        """set_lowpass_cut_freq(doppler_velocity_multiple_targets_ff_sptr self, double _lowpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_lowpass_cut_freq(self, *args, **kwargs)

    def set_highpass_cut_freq(self, *args, **kwargs):
        """set_highpass_cut_freq(doppler_velocity_multiple_targets_ff_sptr self, double _highpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_highpass_cut_freq(self, *args, **kwargs)

    def set_max_num_of_targets(self, *args, **kwargs):
        """set_max_num_of_targets(doppler_velocity_multiple_targets_ff_sptr self, int _max_num_of_targets_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_max_num_of_targets(self, *args, **kwargs)

    def set_doppler_signal_bw(self, *args, **kwargs):
        """set_doppler_signal_bw(doppler_velocity_multiple_targets_ff_sptr self, double _doppler_signal_bw_)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_doppler_signal_bw(self, *args, **kwargs)

    def samples_per_sec(self):
        """samples_per_sec(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_samples_per_sec(self)

    def radar_freq(self):
        """radar_freq(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_radar_freq(self)

    def signal_min_dB(self):
        """signal_min_dB(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_signal_min_dB(self)

    def angle_of_approach(self):
        """angle_of_approach(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_angle_of_approach(self)

    def lowpass_cut_freq(self):
        """lowpass_cut_freq(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_lowpass_cut_freq(self)

    def highpass_cut_freq(self):
        """highpass_cut_freq(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_highpass_cut_freq(self)

    def max_num_of_targets(self):
        """max_num_of_targets(doppler_velocity_multiple_targets_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_max_num_of_targets(self)

    def doppler_signal_bw(self):
        """doppler_signal_bw(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_doppler_signal_bw(self)

    def history(self):
        """history(doppler_velocity_multiple_targets_ff_sptr self) -> unsigned int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(doppler_velocity_multiple_targets_ff_sptr self, int which, int delay)
        declare_sample_delay(doppler_velocity_multiple_targets_ff_sptr self, unsigned int delay)
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(doppler_velocity_multiple_targets_ff_sptr self, int which) -> unsigned int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(doppler_velocity_multiple_targets_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(doppler_velocity_multiple_targets_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_relative_rate(self)

    def start(self):
        """start(doppler_velocity_multiple_targets_ff_sptr self) -> bool"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_start(self)

    def stop(self):
        """stop(doppler_velocity_multiple_targets_ff_sptr self) -> bool"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(doppler_velocity_multiple_targets_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(doppler_velocity_multiple_targets_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(doppler_velocity_multiple_targets_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(doppler_velocity_multiple_targets_ff_sptr self, int m)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(doppler_velocity_multiple_targets_ff_sptr self)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(doppler_velocity_multiple_targets_ff_sptr self) -> bool"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(doppler_velocity_multiple_targets_ff_sptr self, int m)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(doppler_velocity_multiple_targets_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(doppler_velocity_multiple_targets_ff_sptr self, int i) -> long"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(doppler_velocity_multiple_targets_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(doppler_velocity_multiple_targets_ff_sptr self, int port, long max_output_buffer)
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(doppler_velocity_multiple_targets_ff_sptr self, int i) -> long"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(doppler_velocity_multiple_targets_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(doppler_velocity_multiple_targets_ff_sptr self, int port, long min_output_buffer)
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(doppler_velocity_multiple_targets_ff_sptr self, int which) -> float
        pc_input_buffers_full(doppler_velocity_multiple_targets_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(doppler_velocity_multiple_targets_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(doppler_velocity_multiple_targets_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(doppler_velocity_multiple_targets_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(doppler_velocity_multiple_targets_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(doppler_velocity_multiple_targets_ff_sptr self, int which) -> float
        pc_output_buffers_full(doppler_velocity_multiple_targets_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(doppler_velocity_multiple_targets_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(doppler_velocity_multiple_targets_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(doppler_velocity_multiple_targets_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(doppler_velocity_multiple_targets_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(doppler_velocity_multiple_targets_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(doppler_velocity_multiple_targets_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(doppler_velocity_multiple_targets_ff_sptr self)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(doppler_velocity_multiple_targets_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(doppler_velocity_multiple_targets_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(doppler_velocity_multiple_targets_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(doppler_velocity_multiple_targets_ff_sptr self, int priority) -> int"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(doppler_velocity_multiple_targets_ff_sptr self) -> std::string"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(doppler_velocity_multiple_targets_ff_sptr self) -> std::string"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(doppler_velocity_multiple_targets_ff_sptr self) -> io_signature_sptr"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(doppler_velocity_multiple_targets_ff_sptr self) -> io_signature_sptr"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(doppler_velocity_multiple_targets_ff_sptr self) -> long"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(doppler_velocity_multiple_targets_ff_sptr self) -> basic_block_sptr"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(doppler_velocity_multiple_targets_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(doppler_velocity_multiple_targets_ff_sptr self) -> std::string"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(doppler_velocity_multiple_targets_ff_sptr self, std::string name)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(doppler_velocity_multiple_targets_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(doppler_velocity_multiple_targets_ff_sptr self) -> swig_int_ptr"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(doppler_velocity_multiple_targets_ff_sptr self) -> swig_int_ptr"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(doppler_velocity_multiple_targets_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_message_subscribers(self, *args, **kwargs)

doppler_velocity_multiple_targets_ff_sptr_swigregister = _cwradar_swig.doppler_velocity_multiple_targets_ff_sptr_swigregister
doppler_velocity_multiple_targets_ff_sptr_swigregister(doppler_velocity_multiple_targets_ff_sptr)

doppler_velocity_multiple_targets_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
doppler_velocity_multiple_targets_ff = doppler_velocity_multiple_targets_ff.make;

class doppler_velocity_single_target_ff(object):
    """Proxy of C++ gr::cwradar::doppler_velocity_single_target_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, double samples_per_sec, double radar_freq, double signal_min_dB, double angle_of_approach, 
            double lowpass_cut_freq, double highpass_cut_freq) -> doppler_velocity_single_target_ff_sptr
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def set_samples_per_sec(self, *args, **kwargs):
        """set_samples_per_sec(doppler_velocity_single_target_ff self, double _samples_per_sec_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_set_samples_per_sec(self, *args, **kwargs)

    def set_radar_freq(self, *args, **kwargs):
        """set_radar_freq(doppler_velocity_single_target_ff self, double _radar_freq_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_set_radar_freq(self, *args, **kwargs)

    def set_signal_min_dB(self, *args, **kwargs):
        """set_signal_min_dB(doppler_velocity_single_target_ff self, double _signal_min_dB_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_set_signal_min_dB(self, *args, **kwargs)

    def set_angle_of_approach(self, *args, **kwargs):
        """set_angle_of_approach(doppler_velocity_single_target_ff self, double _angle_of_approach_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_set_angle_of_approach(self, *args, **kwargs)

    def set_lowpass_cut_freq(self, *args, **kwargs):
        """set_lowpass_cut_freq(doppler_velocity_single_target_ff self, double _lowpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_set_lowpass_cut_freq(self, *args, **kwargs)

    def set_highpass_cut_freq(self, *args, **kwargs):
        """set_highpass_cut_freq(doppler_velocity_single_target_ff self, double _highpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_set_highpass_cut_freq(self, *args, **kwargs)

    def samples_per_sec(self):
        """samples_per_sec(doppler_velocity_single_target_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_samples_per_sec(self)

    def radar_freq(self):
        """radar_freq(doppler_velocity_single_target_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_radar_freq(self)

    def signal_min_dB(self):
        """signal_min_dB(doppler_velocity_single_target_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_signal_min_dB(self)

    def angle_of_approach(self):
        """angle_of_approach(doppler_velocity_single_target_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_angle_of_approach(self)

    def lowpass_cut_freq(self):
        """lowpass_cut_freq(doppler_velocity_single_target_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_lowpass_cut_freq(self)

    def highpass_cut_freq(self):
        """highpass_cut_freq(doppler_velocity_single_target_ff self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_highpass_cut_freq(self)

    __swig_destroy__ = _cwradar_swig.delete_doppler_velocity_single_target_ff
    __del__ = lambda self : None;
doppler_velocity_single_target_ff_swigregister = _cwradar_swig.doppler_velocity_single_target_ff_swigregister
doppler_velocity_single_target_ff_swigregister(doppler_velocity_single_target_ff)

def doppler_velocity_single_target_ff_make(*args, **kwargs):
  """
    doppler_velocity_single_target_ff_make(size_t vlen, double samples_per_sec, double radar_freq, double signal_min_dB, double angle_of_approach, 
        double lowpass_cut_freq, double highpass_cut_freq) -> doppler_velocity_single_target_ff_sptr
    """
  return _cwradar_swig.doppler_velocity_single_target_ff_make(*args, **kwargs)

class doppler_velocity_single_target_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cwradar::doppler_velocity_single_target_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cwradar::doppler_velocity_single_target_ff)> self) -> doppler_velocity_single_target_ff_sptr
        __init__(boost::shared_ptr<(gr::cwradar::doppler_velocity_single_target_ff)> self, doppler_velocity_single_target_ff p) -> doppler_velocity_single_target_ff_sptr
        """
        this = _cwradar_swig.new_doppler_velocity_single_target_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(doppler_velocity_single_target_ff_sptr self) -> doppler_velocity_single_target_ff"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr___deref__(self)

    __swig_destroy__ = _cwradar_swig.delete_doppler_velocity_single_target_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(doppler_velocity_single_target_ff_sptr self, size_t vlen, double samples_per_sec, double radar_freq, double signal_min_dB, double angle_of_approach, 
            double lowpass_cut_freq, double highpass_cut_freq) -> doppler_velocity_single_target_ff_sptr
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_make(self, *args, **kwargs)

    def set_samples_per_sec(self, *args, **kwargs):
        """set_samples_per_sec(doppler_velocity_single_target_ff_sptr self, double _samples_per_sec_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_samples_per_sec(self, *args, **kwargs)

    def set_radar_freq(self, *args, **kwargs):
        """set_radar_freq(doppler_velocity_single_target_ff_sptr self, double _radar_freq_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_radar_freq(self, *args, **kwargs)

    def set_signal_min_dB(self, *args, **kwargs):
        """set_signal_min_dB(doppler_velocity_single_target_ff_sptr self, double _signal_min_dB_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_signal_min_dB(self, *args, **kwargs)

    def set_angle_of_approach(self, *args, **kwargs):
        """set_angle_of_approach(doppler_velocity_single_target_ff_sptr self, double _angle_of_approach_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_angle_of_approach(self, *args, **kwargs)

    def set_lowpass_cut_freq(self, *args, **kwargs):
        """set_lowpass_cut_freq(doppler_velocity_single_target_ff_sptr self, double _lowpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_lowpass_cut_freq(self, *args, **kwargs)

    def set_highpass_cut_freq(self, *args, **kwargs):
        """set_highpass_cut_freq(doppler_velocity_single_target_ff_sptr self, double _highpass_cut_freq_)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_highpass_cut_freq(self, *args, **kwargs)

    def samples_per_sec(self):
        """samples_per_sec(doppler_velocity_single_target_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_samples_per_sec(self)

    def radar_freq(self):
        """radar_freq(doppler_velocity_single_target_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_radar_freq(self)

    def signal_min_dB(self):
        """signal_min_dB(doppler_velocity_single_target_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_signal_min_dB(self)

    def angle_of_approach(self):
        """angle_of_approach(doppler_velocity_single_target_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_angle_of_approach(self)

    def lowpass_cut_freq(self):
        """lowpass_cut_freq(doppler_velocity_single_target_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_lowpass_cut_freq(self)

    def highpass_cut_freq(self):
        """highpass_cut_freq(doppler_velocity_single_target_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_highpass_cut_freq(self)

    def history(self):
        """history(doppler_velocity_single_target_ff_sptr self) -> unsigned int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(doppler_velocity_single_target_ff_sptr self, int which, int delay)
        declare_sample_delay(doppler_velocity_single_target_ff_sptr self, unsigned int delay)
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(doppler_velocity_single_target_ff_sptr self, int which) -> unsigned int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(doppler_velocity_single_target_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(doppler_velocity_single_target_ff_sptr self) -> double"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_relative_rate(self)

    def start(self):
        """start(doppler_velocity_single_target_ff_sptr self) -> bool"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_start(self)

    def stop(self):
        """stop(doppler_velocity_single_target_ff_sptr self) -> bool"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(doppler_velocity_single_target_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(doppler_velocity_single_target_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(doppler_velocity_single_target_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(doppler_velocity_single_target_ff_sptr self, int m)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(doppler_velocity_single_target_ff_sptr self)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(doppler_velocity_single_target_ff_sptr self) -> bool"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(doppler_velocity_single_target_ff_sptr self, int m)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(doppler_velocity_single_target_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(doppler_velocity_single_target_ff_sptr self, int i) -> long"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(doppler_velocity_single_target_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(doppler_velocity_single_target_ff_sptr self, int port, long max_output_buffer)
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(doppler_velocity_single_target_ff_sptr self, int i) -> long"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(doppler_velocity_single_target_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(doppler_velocity_single_target_ff_sptr self, int port, long min_output_buffer)
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(doppler_velocity_single_target_ff_sptr self, int which) -> float
        pc_input_buffers_full(doppler_velocity_single_target_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(doppler_velocity_single_target_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(doppler_velocity_single_target_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(doppler_velocity_single_target_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(doppler_velocity_single_target_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(doppler_velocity_single_target_ff_sptr self, int which) -> float
        pc_output_buffers_full(doppler_velocity_single_target_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(doppler_velocity_single_target_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(doppler_velocity_single_target_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(doppler_velocity_single_target_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(doppler_velocity_single_target_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(doppler_velocity_single_target_ff_sptr self) -> float"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(doppler_velocity_single_target_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(doppler_velocity_single_target_ff_sptr self)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(doppler_velocity_single_target_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(doppler_velocity_single_target_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(doppler_velocity_single_target_ff_sptr self) -> int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(doppler_velocity_single_target_ff_sptr self, int priority) -> int"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(doppler_velocity_single_target_ff_sptr self) -> std::string"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(doppler_velocity_single_target_ff_sptr self) -> std::string"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(doppler_velocity_single_target_ff_sptr self) -> io_signature_sptr"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(doppler_velocity_single_target_ff_sptr self) -> io_signature_sptr"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(doppler_velocity_single_target_ff_sptr self) -> long"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(doppler_velocity_single_target_ff_sptr self) -> basic_block_sptr"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(doppler_velocity_single_target_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(doppler_velocity_single_target_ff_sptr self) -> std::string"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(doppler_velocity_single_target_ff_sptr self, std::string name)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(doppler_velocity_single_target_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(doppler_velocity_single_target_ff_sptr self) -> swig_int_ptr"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(doppler_velocity_single_target_ff_sptr self) -> swig_int_ptr"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(doppler_velocity_single_target_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cwradar_swig.doppler_velocity_single_target_ff_sptr_message_subscribers(self, *args, **kwargs)

doppler_velocity_single_target_ff_sptr_swigregister = _cwradar_swig.doppler_velocity_single_target_ff_sptr_swigregister
doppler_velocity_single_target_ff_sptr_swigregister(doppler_velocity_single_target_ff_sptr)

doppler_velocity_single_target_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
doppler_velocity_single_target_ff = doppler_velocity_single_target_ff.make;

class vector_flip_ff(object):
    """Proxy of C++ gr::cwradar::vector_flip_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(double vlen) -> vector_flip_ff_sptr"""
        return _cwradar_swig.vector_flip_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _cwradar_swig.delete_vector_flip_ff
    __del__ = lambda self : None;
vector_flip_ff_swigregister = _cwradar_swig.vector_flip_ff_swigregister
vector_flip_ff_swigregister(vector_flip_ff)

def vector_flip_ff_make(*args, **kwargs):
  """vector_flip_ff_make(double vlen) -> vector_flip_ff_sptr"""
  return _cwradar_swig.vector_flip_ff_make(*args, **kwargs)

class vector_flip_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cwradar::vector_flip_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cwradar::vector_flip_ff)> self) -> vector_flip_ff_sptr
        __init__(boost::shared_ptr<(gr::cwradar::vector_flip_ff)> self, vector_flip_ff p) -> vector_flip_ff_sptr
        """
        this = _cwradar_swig.new_vector_flip_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(vector_flip_ff_sptr self) -> vector_flip_ff"""
        return _cwradar_swig.vector_flip_ff_sptr___deref__(self)

    __swig_destroy__ = _cwradar_swig.delete_vector_flip_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(vector_flip_ff_sptr self, double vlen) -> vector_flip_ff_sptr"""
        return _cwradar_swig.vector_flip_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(vector_flip_ff_sptr self) -> unsigned int"""
        return _cwradar_swig.vector_flip_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(vector_flip_ff_sptr self, int which, int delay)
        declare_sample_delay(vector_flip_ff_sptr self, unsigned int delay)
        """
        return _cwradar_swig.vector_flip_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(vector_flip_ff_sptr self, int which) -> unsigned int"""
        return _cwradar_swig.vector_flip_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(vector_flip_ff_sptr self) -> int"""
        return _cwradar_swig.vector_flip_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(vector_flip_ff_sptr self) -> double"""
        return _cwradar_swig.vector_flip_ff_sptr_relative_rate(self)

    def start(self):
        """start(vector_flip_ff_sptr self) -> bool"""
        return _cwradar_swig.vector_flip_ff_sptr_start(self)

    def stop(self):
        """stop(vector_flip_ff_sptr self) -> bool"""
        return _cwradar_swig.vector_flip_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(vector_flip_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _cwradar_swig.vector_flip_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(vector_flip_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _cwradar_swig.vector_flip_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(vector_flip_ff_sptr self) -> int"""
        return _cwradar_swig.vector_flip_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(vector_flip_ff_sptr self, int m)"""
        return _cwradar_swig.vector_flip_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(vector_flip_ff_sptr self)"""
        return _cwradar_swig.vector_flip_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(vector_flip_ff_sptr self) -> bool"""
        return _cwradar_swig.vector_flip_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(vector_flip_ff_sptr self, int m)"""
        return _cwradar_swig.vector_flip_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(vector_flip_ff_sptr self) -> int"""
        return _cwradar_swig.vector_flip_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(vector_flip_ff_sptr self, int i) -> long"""
        return _cwradar_swig.vector_flip_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(vector_flip_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(vector_flip_ff_sptr self, int port, long max_output_buffer)
        """
        return _cwradar_swig.vector_flip_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(vector_flip_ff_sptr self, int i) -> long"""
        return _cwradar_swig.vector_flip_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(vector_flip_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(vector_flip_ff_sptr self, int port, long min_output_buffer)
        """
        return _cwradar_swig.vector_flip_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(vector_flip_ff_sptr self, int which) -> float
        pc_input_buffers_full(vector_flip_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.vector_flip_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(vector_flip_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(vector_flip_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.vector_flip_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(vector_flip_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(vector_flip_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.vector_flip_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(vector_flip_ff_sptr self, int which) -> float
        pc_output_buffers_full(vector_flip_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.vector_flip_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(vector_flip_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(vector_flip_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.vector_flip_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(vector_flip_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(vector_flip_ff_sptr self) -> pmt_vector_float
        """
        return _cwradar_swig.vector_flip_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(vector_flip_ff_sptr self) -> float"""
        return _cwradar_swig.vector_flip_ff_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(vector_flip_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cwradar_swig.vector_flip_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(vector_flip_ff_sptr self)"""
        return _cwradar_swig.vector_flip_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(vector_flip_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cwradar_swig.vector_flip_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(vector_flip_ff_sptr self) -> int"""
        return _cwradar_swig.vector_flip_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(vector_flip_ff_sptr self) -> int"""
        return _cwradar_swig.vector_flip_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(vector_flip_ff_sptr self, int priority) -> int"""
        return _cwradar_swig.vector_flip_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(vector_flip_ff_sptr self) -> std::string"""
        return _cwradar_swig.vector_flip_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(vector_flip_ff_sptr self) -> std::string"""
        return _cwradar_swig.vector_flip_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(vector_flip_ff_sptr self) -> io_signature_sptr"""
        return _cwradar_swig.vector_flip_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(vector_flip_ff_sptr self) -> io_signature_sptr"""
        return _cwradar_swig.vector_flip_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(vector_flip_ff_sptr self) -> long"""
        return _cwradar_swig.vector_flip_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(vector_flip_ff_sptr self) -> basic_block_sptr"""
        return _cwradar_swig.vector_flip_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(vector_flip_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _cwradar_swig.vector_flip_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(vector_flip_ff_sptr self) -> std::string"""
        return _cwradar_swig.vector_flip_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(vector_flip_ff_sptr self, std::string name)"""
        return _cwradar_swig.vector_flip_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(vector_flip_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cwradar_swig.vector_flip_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(vector_flip_ff_sptr self) -> swig_int_ptr"""
        return _cwradar_swig.vector_flip_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(vector_flip_ff_sptr self) -> swig_int_ptr"""
        return _cwradar_swig.vector_flip_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(vector_flip_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cwradar_swig.vector_flip_ff_sptr_message_subscribers(self, *args, **kwargs)

vector_flip_ff_sptr_swigregister = _cwradar_swig.vector_flip_ff_sptr_swigregister
vector_flip_ff_sptr_swigregister(vector_flip_ff_sptr)

vector_flip_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vector_flip_ff = vector_flip_ff.make;



